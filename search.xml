<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Beautify The Mac Bash Base on iTerm2 And oh-my-zsh</title>
    <url>/2022/04/02/%20Beautify-The-Mac-Bash/</url>
    <content><![CDATA[<p>在公司实习需要使用mac电脑来进行工作，其中bash是非常重要的工具，本文也是对bash进行了美化，提升使用的效率。<br>本文采用的方案是利用ITerm2 与 oh-my-zsh来进行美化,同时也要将其配置在vscode中。</p>
<p>在配置的过程中，发现如果路径层级过长，主机名的信息较长，会导致代码容易换行，影响观看。所以选了隐藏路径以及主机名，仅保留当前文件名，效果如图所示：</p>
<p><img src="/2022/04/02/%20Beautify-The-Mac-Bash/demo.jpg" alt="demo show1"></p>
<span id="more"></span>

<h1 id="1-Iterm2安装及其陪配置"><a href="#1-Iterm2安装及其陪配置" class="headerlink" title="1. Iterm2安装及其陪配置"></a>1. Iterm2安装及其陪配置</h1><p>手动安装: <a href="https://iterm2.com/">打开Iterm2 的官方网址</a>，下载相应的Iterm2 安装包，并安装。<br>Homebrew安装: 为了方便后期管理，采用homebrew进行安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use brew to install iterm2</span></span><br><span class="line">brew install iTerm2</span><br></pre></td></tr></table></figure>

<p>设置iTerm2为默认的终端</p>
<center>
    <img src="/2022/04/02/%20Beautify-The-Mac-Bash/default-iterm2.jpg" width="300">
</center>

<p>设置iTerm2的字体为 <em>Meslo LG L DZ for powerline</em>，之后vscode的terminal字体也设置为<em>Meslo LG L DZ for powerline</em>。</p>
<h1 id="2-oh-my-zsh"><a href="#2-oh-my-zsh" class="headerlink" title="2. oh-my-zsh"></a>2. oh-my-zsh</h1><p> 首先，在进入oh-my-zsh之前，要先了解zsh。</p>
<blockquote>
<p> <strong>zsh又称为z-shell</strong>，是一款可用作交互式登录的shell及脚本编写的命令解释器。Zsh对Bourne shell做出了大量改进，同时加入了Bash、ksh及tcsh的某些功能。自2019年起，macOS的默认Shell已从Bash改为Zsh。</p>
</blockquote>
<p> zsh 有如下几个特点：</p>
<ul>
<li>可帮助用户键入常用命令选项及参数的可编程命令行补全功能，自带对数百条命令的支持</li>
<li>可与任意Shell共享命令历史</li>
<li>多种兼容模式（例如，Zsh可在运行为&#x2F;bin&#x2F;sh的情况下伪装成Bourne shell）</li>
<li>自带where命令，其与which命令类似，但是显示指定于$PATH中所指定指令的全部位置，而不是仅显示所使用指令的位置。</li>
</ul>
<p>其中，用户社区网站”Oh My Zsh”收集Z shell的第三方插件及主题。</p>
<p>本文也是利用oh-my-zsh来美化oh-my-zsh，利用如下指令进行安装，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl 安装</span></span><br><span class="line">export REMOTE=https://gitee.com/imirror/ohmyzsh.git</span><br><span class="line">sh -c &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget安装</span></span><br><span class="line">export REMOTE=https://gitee.com/imirror/ohmyzsh.git</span><br><span class="line">sh -c &quot;$(wget -O- https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetch安装</span></span><br><span class="line">export REMOTE=https://gitee.com/imirror/ohmyzsh.git</span><br><span class="line">sh -c &quot;$(fetch -o - https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装界面如下：</p>
<center>
<img src="/2022/04/02/%20Beautify-The-Mac-Bash/oh-my-zsh安装.jpg">
</center>

<h1 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h1><p>oh-my-zsh主题很多，其中 <em>agnoster</em> 是比较常用的主题，本文也是打算使用该主题（更多的主题可以查看<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">theme主题</a>。</p>
<h1 id="3-1-ZSH-THEME配置"><a href="#3-1-ZSH-THEME配置" class="headerlink" title="3.1 ZSH_THEME配置"></a>3.1 ZSH_THEME配置</h1><p>打开 ~&#x2F;.zshrc,修改ZSH-THEME这一配置.</p>
<blockquote>
<p><em>zshrc</em> file is where <em>you’d place customizations to the z shell</em>.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME =&quot;agnoster</span><br></pre></td></tr></table></figure>
<center>
<img src="/2022/04/02/%20Beautify-The-Mac-Bash/ZSH_THEME.jpg">
</center>

<h1 id="3-2-字体安装与配置"><a href="#3-2-字体安装与配置" class="headerlink" title="3.2  字体安装与配置"></a>3.2  字体安装与配置</h1><p>注意agnoster需要安装额外的字体<a href="https://cdn.jsdelivr.net/gh/powerline/fonts/Meslo%20Slashed/Meslo%20LG%20S%20Regular%20for%20Powerline.ttf">Meslo for Powerline</a>,　下载安装相应的ttf文件。</p>
<p>配置完字体之后，打开iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font，选择Meslo LG S Regular for Powerline。</p>
<center>
    <img src="/2022/04/02/%20Beautify-The-Mac-Bash/iterm-pref.jpg" , height="300">
</center>


<center>
    <img src="/2022/04/02/%20Beautify-The-Mac-Bash/zsh-font.jpg" , height="300">
</center>

<center>
    <img src="/2022/04/02/%20Beautify-The-Mac-Bash/zsh-demo.jpg" , height="300">
</center>

<h1 id="4-优化zsh"><a href="#4-优化zsh" class="headerlink" title="4. 优化zsh"></a>4. 优化zsh</h1><p>在3.2 中，看到安装oh-my-zsh后的效果。但是存在一定的不足，比如命令行开头都有主机名，文件路径，能够看到当层级增多的时候，会显得非常的长，影响输入，需要一定的优化。笔者选择的方式，是隐去主机名和层级路径，仅保留用户名和当前文件路径，当需要查看路径的时候调用指令pwd即可。</p>
<h1 id="4-1-隐藏主机名"><a href="#4-1-隐藏主机名" class="headerlink" title="4.1 隐藏主机名"></a>4.1 隐藏主机名</h1><p>根据3.1可知，zsh的配置信息主要在~&#x2F;.zshrc这个文件，在该<strong>文件底部增加</strong>下添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">* 方法一：隐藏主机和用户名-是笔者选择的方案</span></span><br><span class="line">prompt_context() &#123;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二：隐藏主机名</span></span><br><span class="line">prompt_context() &#123;</span><br><span class="line">  if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || -n &quot;$SSH_CLIENT&quot; ]]; then</span><br><span class="line">    prompt_segment black default &quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)$USER&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法三：隐藏用户名</span></span><br><span class="line">prompt_context() &#123;</span><br><span class="line">  if [[ &quot;$USER&quot; != &quot;$DEFAULT_USER&quot; || -n &quot;$SSH_CLIENT&quot; ]]; then</span><br><span class="line">    prompt_segment black default &quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)$HOST&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 更新 ~/.zshrc</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h1 id="4-2-隐藏层级路径，保留当前路径"><a href="#4-2-隐藏层级路径，保留当前路径" class="headerlink" title="4.2 隐藏层级路径，保留当前路径"></a>4.2 隐藏层级路径，保留当前路径</h1><p>在路径<del>&#x2F;.oh-my-zsh&#x2F;themes&#x2F;agnoster.zsh-theme 下，<br>打开后找到prompt_dir() {}这个函数，然后将prompt_segment blue black ‘%</del>‘<br>最后面的~改为c即可：prompt_segment blue black ‘%c’,<br>最后调用指令 source ~&#x2F;.zshrc, 完成刷新。</p>
<p>实现了保留用户名以及当前层级用户。</p>
<center>
    <img src="/2022/04/02/%20Beautify-The-Mac-Bash/hide-host-name.jpg" ,>
</center>

<h1 id="5-插件"><a href="#5-插件" class="headerlink" title="5. 插件"></a>5. 插件</h1><p>为了进一步提高zsh的效率，笔者添加了部分插件。但是，调用终端的好处在于其快速，便捷，过多的插件反而会使得终端显得臃肿，得不偿失，我们故仅添加必要的插件。<br>首先安装oh-my-zsh，打开~&#x2F;.zshrc文件找到plugins&#x3D;( git )，这里是我们已经启用了那些插件.如果想要启用某个插件，装好之后直接修改</p>
<blockquote>
<p>plugins &#x3D; (插件A 插件B 插件C)</p>
</blockquote>
<ol>
<li><p>zsh-autosuggestions<br>非常好用的一个插件，会记录你之前输入过的所有命令，并且自动匹配你可能想要输入命令，然后按→补全</p>
</li>
<li><p>zsh-syntax-highlighting<br>这个插件直接在输入过程中就会提示你，当前命令是否正确，错误红色，正确绿色</p>
</li>
</ol>
<h1 id="6-vscode-配置"><a href="#6-vscode-配置" class="headerlink" title="6. vscode 配置"></a>6. vscode 配置</h1><p>在vscode中有可能会出现乱码的情况，这是因为终端的字体没有设置好。在设置搜索中，打开setting.json文件，加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;terminal.integrated.defaultProfile.osx&quot;: &quot;zsh&quot;,</span><br><span class="line">&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG L DZ for Powerline&quot;,</span><br></pre></td></tr></table></figure>

<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p><a href="https://iterm2.com/">1. Iterm2官方文档以及下载链接</a></p>
<p><a href="https://segmentfault.com/a/1190000039834490">2. mac之 iTerm2 + Oh My Zsh 终端安装教程</a></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">3. oh-my-zsh theme主题方案</a></p>
<p><a href="https://0clickjacking0.github.io/2020/10/04/oh-my-zsh%E9%9A%90%E8%97%8F%E7%94%A8%E6%88%B7%E5%90%8D%E6%88%96%E8%80%85%E4%B8%BB%E6%9C%BA%E5%90%8D/">4. oh-my-zsh 隐藏主机名</a></p>
<p><a href="https://www.jianshu.com/p/ee442cb4d6c2">5. Bash shell &#x2F; Zsh 里修改前缀 (隐藏用户@主机，添加Git分支名称)</a></p>
<p><a href="https://www.ioiox.com/archives/34.html">6.macOS使用oh-my-zsh美化Terminal,iTerm2,VSCode命令行终端配置教程</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>zsh</tag>
        <tag>iterm2</tag>
      </tags>
  </entry>
  <entry>
    <title>A Private Blog Built By Github + Hexo + NexT</title>
    <url>/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/</url>
    <content><![CDATA[<p>这个私人博客的搭建是基于Github Page创建最基础的个人静态网站，Hexo则是一个快速、简洁且高效的博客框架，利用Markdown进行文章的解析，NexT是其中的一种主题theme，其拓展性优秀，后期能基于该框架与主题进行个性化的修改。基于Github + Hexo + NexT模式的博客在管理方便，实现本地-远程简单部署的同时，也保证了博客网页的美观与整洁。</p>
<p>本文将从以下几个部分来记录该博客的搭建:</p>
<pre><code>- 项目构建及其部署
- 配置文件功能解析
- 基于该框架主题的DIY
- 难点与收获
</code></pre>
<span id="more"></span>


<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        度过了迷茫的半年，终于摸清楚了自己未来职业的方向，不再畏畏缩缩，要勇于去拼搏，去争取机会。在接下来的5年会是我未来非常重要的一段时光，实习、研究生、工作等等，每一步得需要万分的努力才能一步一个台阶的往上爬。所以我想创捷属于自己的blog，来记录自己未来几年的自己在技术、项目、职场等方面的一些心得与体会。之前也有类似的想法，但是经常就是做到一半中途而废。这次我是想认真的经营自己blog，不断的督促自己学习进步。同时blog也利于自己对过去经历进行记录与复盘，查漏补缺更进一步。</p>
<p>​        这个私人博客的搭建是基于Github Page创建最基础的个人静态网站，Hexo则是一个快速、简洁且高效的博客框架，利用Markdown进行文章的解析，NexT是其中的一种主题theme，其拓展性优秀，后期能基于该框架与主题进行个性化的修改。基于Github + Hexo + NexT模式的博客在管理方便，本地-远程简单部署的同时，也保证了博客网页的美观与整洁。</p>
<p>​        本文将从以下几个部分来记录该博客的搭建:</p>
<ul>
<li>项目构建及其部署</li>
<li>配置文件功能解析</li>
<li>基于该框架主题的DIY</li>
<li>难点与收获</li>
</ul>
<p>​        个人链接: </p>
<blockquote>
<ol>
<li><p><a href="https://github.com/wjmars98">Mars’ Github Home</a></p>
</li>
<li><p><a href="https://wjmars98.github.io/">Mars’ Blog Home Page</a></p>
</li>
</ol>
</blockquote>
<h1 id="项目构建及其部署"><a href="#项目构建及其部署" class="headerlink" title="项目构建及其部署"></a>项目构建及其部署</h1><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><p>​        该博客主要是利用Github为其每个用户提供的Github Pages服务，允许用户搭建一个静态网站。所以首先需要Github上构建名为:{username}.github.io的仓库，其名字必须由“.github.io”结尾。同时为了后续的操作便利，<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/about-ssh">需要配置本地与Github的ssh连接</a>。</p>
<p>​        同时还需安装Node.js，Hexo。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node.js</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">download from https://nodejs.org/zh-cn/download/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hexo 安装</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<center>
    <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/build_repository.png" width="600">
</center>



<center>
     <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/ssh-key.png" width="600">
</center>



<h2 id="项目初始及本地搭建"><a href="#项目初始及本地搭建" class="headerlink" title="项目初始及本地搭建"></a>项目初始及本地搭建</h2><p>​        首先, 需要创建项目，利用指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo init &#123;name&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我的项目名为wjmars98</span></span><br><span class="line">hexo init wjmars98</span><br></pre></td></tr></table></figure>

<p>在wjmars98文件夹下面出现Hexo的初始化文件，各个文件的具体细节下一章再展开。</p>
<center>
     <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/file_structure.png" width="600">
</center>

<p>​        第二，需要将Hexo编译成HTML文件，调用指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译形成HTML文件</span></span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>输出结果里面包含了 js、css、font 等内容，处在了项目根目录下的 public 文件夹下面，随后利用Hexo提供的Server服务，将其在本地运行起来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 启动hexo服务器</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>随后可以在本地4000端口查看博客站点，如下所示,其中图例是已经选用next的情况。</p>
<center>
     <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/hexo_server.png" width="600">
</center>



<center>
     <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/localhost.png" width="600">
</center>



<h2 id="项目部在Github-Page上的部署"><a href="#项目部在Github-Page上的部署" class="headerlink" title="项目部在Github Page上的部署"></a>项目部在Github Page上的部署</h2><p>​        为了便利后面的操作，我们将部署的shell脚本写在 <em>deploy.sh</em> 的脚本文件上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deploy.sh 文件</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>利用 <em>sh deploy.sh</em> 指令就能完成部署操作。</p>
<p>​        在部署之前，我们还需要修改部署文件细节。打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">替换成个人github上的git地址</span></span><br><span class="line">  repo: &#123;git repo ssh address&#125;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>还需安装支持 Git 的部署插件，名字叫做 hexo-deployer-git，然后才能顺利部署到Github上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插件安装</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署命令</span></span><br><span class="line">sh deploy.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不按照会报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployer not found: git</span></span><br></pre></td></tr></table></figure>

<center>
     <img src="/2022/03/18/A-Private-Blog-Built-By-Github-Hexo-Next/deploy.png" width="600">
</center>

<p>​        此时打开<a href="https://wjmars98.github.io/">https://wjmars98.github.io</a> 便可以打开网站。</p>
<h1 id="配置文件功能解析"><a href="#配置文件功能解析" class="headerlink" title="配置文件功能解析"></a>配置文件功能解析</h1><p>​        在第二章中，我们初步完成了hexo地搭建以及在Github Page上地部署，文件夹为wjmars98，本章将对该文件夹下地配置文件进行详细解析。    </p>
<p>​        首先是wjmars98文件夹的文件树:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的 配置 信息，您可以在此配置大部分的参数</span><br><span class="line">├── package.json # 应用程序的信息。</span><br><span class="line">├── scaffolds # 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">├── source # 资源文件夹是存放用户资源的地方。</span><br><span class="line">|   ├── _drafts	# 草稿</span><br><span class="line">|   └── _posts # 文章</span><br><span class="line">└── themes # 主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>

<p>​        我们可以在_config.yml中修改大部分配置。</p>
<h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">参数</td>
<td align="left">描述</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left"><code>source_dir</code></td>
<td align="left">资源文件夹，这个文件夹用来存放内容。</td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>public_dir</code></td>
<td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td align="left"><code>public</code></td>
</tr>
<tr>
<td align="left"><code>tag_dir</code></td>
<td align="left">标签文件夹</td>
<td align="left"><code>tags</code></td>
</tr>
<tr>
<td align="left"><code>archive_dir</code></td>
<td align="left">归档文件夹</td>
<td align="left"><code>archives</code></td>
</tr>
<tr>
<td align="left"><code>category_dir</code></td>
<td align="left">分类文件夹</td>
<td align="left"><code>categories</code></td>
</tr>
<tr>
<td align="left"><code>code_dir</code></td>
<td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td>
<td align="left"><code>downloads/code</code></td>
</tr>
<tr>
<td align="left"><code>i18n_dir</code></td>
<td align="left">国际化（i18n）文件夹</td>
<td align="left"><code>:lang</code></td>
</tr>
<tr>
<td align="left"><code>skip_render</code></td>
<td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>new_post_name</code></td>
<td align="left">新文章的文件名称</td>
<td align="left">:title.md</td>
</tr>
<tr>
<td align="left"><code>default_layout</code></td>
<td align="left">预设布局</td>
<td align="left">post</td>
</tr>
<tr>
<td align="left"><code>auto_spacing</code></td>
<td align="left">在中文和英文之间加入空格</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>titlecase</code></td>
<td align="left">把标题转换为 title case</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>external_link</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>external_link.enable</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>external_link.field</code></td>
<td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td>
<td align="left"><code>site</code></td>
</tr>
<tr>
<td align="left"><code>external_link.exclude</code></td>
<td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td>
<td align="left"><code>[]</code></td>
</tr>
<tr>
<td align="left"><code>filename_case</code></td>
<td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left"><code>render_drafts</code></td>
<td align="left">显示草稿</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>post_asset_folder</code></td>
<td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>relative_link</code></td>
<td align="left">把链接改为与根目录的相对位址</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>future</code></td>
<td align="left">显示未来的文章</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>highlight</code></td>
<td align="left">代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>prismjs</code></td>
<td align="left">代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>date_format</code></td>
<td align="left">日期格式</td>
<td align="left"><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td align="left"><code>time_format</code></td>
<td align="left">时间格式</td>
<td align="left"><code>HH:mm:ss</code></td>
</tr>
<tr>
<td align="left"><code>updated_option</code></td>
<td align="left">当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td>
<td align="left"><code>mtime</code></td>
</tr>
</tbody></table>
<h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>theme</code></td>
<td align="left">当前主题名称。值为<code>false</code>时禁用主题</td>
</tr>
<tr>
<td align="left"><code>theme_config</code></td>
<td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td>
</tr>
<tr>
<td align="left"><code>deploy</code></td>
<td align="left">部署部分的设置</td>
</tr>
<tr>
<td align="left"><code>meta_generator</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td>
</tr>
</tbody></table>
<h2 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front-Matter"></a>Front-Matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
<td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
<td align="left">文章的文件名</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">建立日期</td>
<td align="left">文件建立日期</td>
</tr>
<tr>
<td align="left"><code>updated</code></td>
<td align="left">更新日期</td>
<td align="left">文件更新日期</td>
</tr>
<tr>
<td align="left"><code>comments</code></td>
<td align="left">开启文章的评论功能</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>tags</code></td>
<td align="left">标签（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>categories</code></td>
<td align="left">分类（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">覆盖文章网址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>excerpt</code></td>
<td align="left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>disableNunjucks</code></td>
<td align="left">Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>lang</code></td>
<td align="left">Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td>
<td align="left">Inherited from <code>_config.yml</code></td>
</tr>
</tbody></table>
<p>​        </p>
<p>更多细节可以查阅:<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></p>
<h1 id="基于NexT框架主题的DIY"><a href="#基于NexT框架主题的DIY" class="headerlink" title="基于NexT框架主题的DIY"></a>基于NexT框架主题的DIY</h1><p>​        我们选择框架在themes文件夹下，文件树如图所示:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 主题的配置文件。</span><br><span class="line">├── languages	# 语言文件夹</span><br><span class="line">├── layout # 布局文件夹</span><br><span class="line">├── scripts # 脚本文件夹</span><br><span class="line">└── source # 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中</span><br></pre></td></tr></table></figure>

<p>​        目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>​        执行完毕之后 <a href="https://theme-next.js.org/">Next 主题</a>的源码就会出现在项目的 themes&#x2F;next 文件夹下。 然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>



<h1 id="难点与收获"><a href="#难点与收获" class="headerlink" title="难点与收获"></a>难点与收获</h1><h2 id="Tags-And-Categories"><a href="#Tags-And-Categories" class="headerlink" title="Tags And Categories"></a>Tags And Categories</h2><p>​        只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure>

<p>但是 Hexo <strong>不支持指定多个同级分类</strong>。下面的指定方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></figure>

<p><em>会使分类<code>Life</code>成为<code>Diary</code>的子分类</em>，而不是并列分类.</p>
<p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ol>
<li><u><a href="https://hexo.io/zh-cn/">Hexo官方参考资料</a></u></li>
<li><a href="https://cuiqingcai.com/7625.html">崔庆才-利用 GitHub + Hexo + Next 从零搭建一个博客)</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/about-ssh">Github的SSH连接</a></li>
<li><a href="https://www.npmjs.com/package/hexo-asset-image-for-hexo5">Hexo 图片部署</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Brew</title>
    <url>/2022/03/28/Homebrew/</url>
    <content><![CDATA[<p>在使用mac系统的时候，和win 的一个区别在于sofeware的安装，要将从int下载下来的包，拽入app store中，安装在指定的位置。后来发现mac中存在一个工具——homebrew，能有效的帮助用户下载和管理相应的应用软件。本文也是记录下一些常用的homebrew的用法，提高homebrew的使用。</p>
<blockquote>
<p>What Does Homebrew Do?</p>
<ul>
<li>Homebrew installs the stuff you need that Apple (or your Linux system) didn’t.</li>
<li>Homebrew installs packages to their own directory and then symlinks their files into &#x2F;usr&#x2F;local (on macOS Intel).</li>
<li>It’s all Git and Ruby underneath, so hack away with the knowledge that you can easily revert your modifications and merge upstream updates.</li>
</ul>
</blockquote>
<center>
  <img src="/2022/03/28/Homebrew/logo.png">
</center>

<span id="more"></span>

<h1 id="What-Is-Homebrew"><a href="#What-Is-Homebrew" class="headerlink" title="What Is Homebrew?"></a>What Is Homebrew?</h1><p>Homebrew: 是一款自由及开放源代码的软件包管理系统，用以简化macOS系统上的软件安装过程，最初由马克斯·霍威尔（Max Howell）写成。因其可扩展性得到了一致好评，而在Ruby on Rails社区广为人知。</p>
<p>Homebrew使用GitHub，通过用户的贡献扩大对软件包的支持。2012年，Homebrew是GitHub上拥有最多新贡献者的项目。2013年，Homebrew同时成为GitHub上最多贡献者及最多已关闭问题的项目。</p>
<p>默认安装在&#x2F;usr&#x2F;local，由一个核心git版本库构成，以使用户能更新Homebrew。包管理器使用一种称为“公式”（formula）的DSL脚本来管理依赖、下载源代码及配置和编译软件，从源代码中构建软件。称为“瓶”（bottle）的二进制包是用默认选项预编译好的公式。</p>
<h1 id="安装、配置与使用流程"><a href="#安装、配置与使用流程" class="headerlink" title="安装、配置与使用流程"></a>安装、配置与使用流程</h1><h2 id="homebrew的安装"><a href="#homebrew的安装" class="headerlink" title="homebrew的安装"></a>homebrew的安装</h2><ol>
<li>调用安装指令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装脚本</span></span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl 安装路径</span></span><br><span class="line">cd /usr/local/Homebrew</span><br></pre></td></tr></table></figure>
<img src="/2022/03/28/Homebrew/homebrew_path.jpg"></li>
</ol>
<p>如果在国内，使用brew会有一定的限制，可以选择换源,确保homebrew的使用。</p>
<blockquote>
<p><em>笔者国内的公司可以合法访问外网，所以并未进行相应的换源。</em></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 替换为清华镜像源</span></span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换homebrew-core.git</span></span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新源</span></span><br><span class="line">brew update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 替换为阿里云源</span></span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">替换homebrew-core.git</span></span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新源</span></span><br><span class="line">brew update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 替换为腾讯云源</span></span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">替换homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.cloud.tencent.com/homebrew/homebrew-core.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新源</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h1 id="cask"><a href="#cask" class="headerlink" title="cask"></a>cask</h1><p>brew 是从下载源码解压然后 .&#x2F;configure &amp;&amp; make install ，同时会包含相关依存库。并自动配置好各种环境变量，而且易于卸载。 </p>
<p>brew cask 是 已经编译好了的应用包 （.dmg&#x2F;.pkg），仅仅是下载解压，放在统一的目录中（&#x2F;opt&#x2F;homebrew-cask&#x2F;Caskroom），省掉了自己去下载、解压、拖拽（安装）等蛋疼步骤，同样，卸载相当容易与干净。这个对一般用户来说会比较方便，包含很多在 AppStore 里没有的常用软件。</p>
<p>也可以理解为，<strong>brew针对CLI程序，brew cask解决GUI程序的安装</strong>。</p>
<p>brew 另一个好处可以管理软件的升级。</p>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><ol>
<li>安装CLI软件以curl为例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">homebrew 安装curl</span></span><br><span class="line">brew install curl</span><br></pre></td></tr></table></figure>
<img src="/2022/03/28/Homebrew/homebrew_install.jpg"></li>
</ol>
<p>可以看到，curl的安装路径在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/Cellar/curl/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>To clarify: The “Cellar” directory is a location that Homebrew made up for its own use. (The name fits with Homebrew’s “beer” theme: the “cellar” is where you store your “kegs” of “homebrew”.) No other software uses it. So if you don’t need Homebrew and the programs you installed using Homebrew, you can delete Cellar.</p>
</blockquote>
<ol start="2">
<li>安装GUI软件以有道词典为例:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">homebrew 安装有道词典</span></span><br><span class="line">brew install --cask youdaodict</span><br></pre></td></tr></table></figure>
<img src="/2022/03/28/Homebrew/youdaodict.jpg"></li>
</ol>
<img src="/2022/03/28/Homebrew/youdaologo.jpg">

<h1 id="brew-常用方法"><a href="#brew-常用方法" class="headerlink" title="brew 常用方法"></a>brew 常用方法</h1><ul>
<li>安装软件: brew install git</li>
<li>卸载软件: brew uninstall git</li>
<li>搜索软件: brew search git</li>
<li>显示已经安装软件列表: brew list</li>
<li>删除旧版本安装包缓存: brew cleanup git、brew cleanup</li>
<li>查看那些已安装的程序需要更新: brew outdated</li>
<li>更新软件，把所有的Formula目录更新: brew update</li>
<li>更新某具体软件: brew upgrade git</li>
<li>锁定某个软件禁止更新: brew pin git</li>
<li>解除禁更锁定: brew unpin git</li>
<li>查看brew存放安装包的缓存地址: brew –cache</li>
<li>显示安装的服务: brew services list</li>
<li>启动: brew services start mysql</li>
<li>停止: brew services stop mysql</li>
<li>重启: brew services restart mysql</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.zhihu.com/question/22624898">1. 知乎：brew和brew cask有什么区别？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/325795191">2. 知乎：homebrew与brew的常用命令</a></p>
<p><a href="https://brew.sh/">3. homebrew 官方文档</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyenv</title>
    <url>/2022/04/02/Pyenv/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Ripple--The News Real Time Heat Analysis Platform</title>
    <url>/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/</url>
    <content><![CDATA[<p>Ripple 该平台实现对当前新闻网舆论热点事件的实时可视化分析，主要在<a href="https://www.bilibili.com/video/BV1mK411T7WY?p=1">B站:新闻网大数据实时分析可视化系统</a>这一项目基础进行进一步改造，使用框架组件包括：Hadoop、Zookeeper、Flume、Kafka、Hive、HBase、Cloudera HUE、Spark、Echart等。</p>
<p>本文主要Ripple项目的业务分析、技术造型、集群规划、安装部署、整合集成与开发和可视化设计等部分组成。项目目标为充分理解搭建过程中涉及的大数据组件，提升个人相关开发能力。</p>
<span id="more"></span>
<h1 id="1-项目需求分析、架构设计、数据流程设计"><a href="#1-项目需求分析、架构设计、数据流程设计" class="headerlink" title="1. 项目需求分析、架构设计、数据流程设计"></a>1. 项目需求分析、架构设计、数据流程设计</h1><h2 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h2><ol>
<li>捕获用户浏览的日志信息(TB)</li>
<li>实时分析前20名流量最高的新闻话题</li>
<li>实时统计当前线上已曝光的新闻话题</li>
<li>统计哪些时段用户浏览量最高</li>
<li>报表</li>
</ol>
<h2 id="1-2-架构设计"><a href="#1-2-架构设计" class="headerlink" title="1.2 架构设计"></a>1.2 架构设计</h2><img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/project_structure.png" width="600">

<h2 id="1-3-数据流程"><a href="#1-3-数据流程" class="headerlink" title="1.3 数据流程"></a>1.3 数据流程</h2><img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/data_flow.png" width="600">

<h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h1><h2 id="2-1-集群资源规划"><a href="#2-1-集群资源规划" class="headerlink" title="2.1 集群资源规划"></a>2.1 集群资源规划</h2><p>该项目出于学习目的，比较腾讯云、阿里云、华为云等云服务，选择租用腾讯云的高性能云服务器,由于我们选择同一子网下的三台机器，所以我们只需使用节点的内网ip即可，并且保证了数据传输速度。<br><img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/cloud_machine.png" width="600"></p>
<p>三台服务器相关资源的部署规划如图所示:<br><img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/cluster_resources.png" width="600"></p>
<br>

<p>为了方便三台云服务器间的数据传输与登录，需要设计三台云服务器间的ssh免密登录，其原理为将每台主机authorized_keys文件里面包含的主机（ssh密钥），该主机都能无密码登录，所以只要每台主机的authorized_keys文件里面都放入其他主机（需要无密码登录的主机）的ssh密钥即可,参考<a href="https://www.cnblogs.com/shireenlee4testing/p/10366061.html">Hadoop集群配置免密SSH登录方法</a>。</p>
<p>完成ssh免密登录之后，由于ip地址相对难以记忆，通过修改&#x2F;etc&#x2F;hosts中的映射关系，这样能够方便再服务期间传输文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用如下指令,在hosts末尾中添加ip映射</span></span><br><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/ssh.png" width="400">

<br>


<h2 id="2-2-Hadoop-搭建"><a href="#2-2-Hadoop-搭建" class="headerlink" title="2.2 Hadoop 搭建"></a>2.2 Hadoop 搭建</h2><p>首先，根据教程，再&#x2F;opt文件夹下文件树为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">|-- opt # 主要文件夹</span><br><span class="line">|   |-- data # 存放数据</span><br><span class="line">|   |-- modules # haddop</span><br><span class="line">|   |-- softwares # 相关软件下载包</span><br><span class="line">|   |-- tool # 工具插件</span><br><span class="line">|</span><br></pre></td></tr></table></figure>
<p>在<a href="https://archive.apache.org/dist">A.hadoop资源下载</a>中，-&gt; hadoop -&gt; core -&gt;   hadoop-2.6.5.tar.gz，下载相关资源，并下载在software，最终解压至&#x2F;opt&#x2F;modules&#x2F;，重命名为hadoop。</p>
<p>下载相关jdk也安装在&#x2F;opt&#x2F;modules中，配置&#x2F;etc&#x2F;profile环境变量。对于hadoop，有几个关键文件需要配置:</p>
<h3 id="2-2-1-core-site-xml"><a href="#2-2-1-core-site-xml" class="headerlink" title="2.2.1 core-site.xml"></a>2.2.1 core-site.xml</h3><p>路径: &#x2F;opt&#x2F;modules&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p>
<p>功能:  配置集群全局参数属性，用于定义系统级别的参数，如HDFS URL 、Hadoop的临时目录等</p>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/core-site.png" width="400">


<h3 id="2-2-2-hdfs-site-xml"><a href="#2-2-2-hdfs-site-xml" class="headerlink" title="2.2.2 hdfs-site.xml"></a>2.2.2 hdfs-site.xml</h3><p>路径: &#x2F;opt&#x2F;modules&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml</p>
<p>功能: 配置HDFS组件的属性，如名称节点和数据节点的存放位置、文件副本的个数、文件的读取权限等</p>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/hdfs-site.png" width="400">


<h3 id="2-2-3-mapred-site-xml"><a href="#2-2-3-mapred-site-xml" class="headerlink" title="2.2.3 mapred-site.xml"></a>2.2.3 mapred-site.xml</h3><p>路径: &#x2F;opt&#x2F;modules&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml</p>
<p>功能：配置map-reduce组件的属性，包括JobHistory Server 和应用程序参数两部分，如reduce任务的默认个数、任务所能够使用内存的默认上下限等</p>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/mapred-site.png" width="400">


<h3 id="2-2-4-yarn-site-xml"><a href="#2-2-4-yarn-site-xml" class="headerlink" title="2.2.4 yarn-site.xml"></a>2.2.4 yarn-site.xml</h3><p>路径: &#x2F;opt&#x2F;modules&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml</p>
<p>功能: 集群资源管理系统参数，配置ResourceManager ，nodeManager的通信端口，web监控端口等</p>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/yarn-site.png" width="400">

<h3 id="2-2-5-hadoop-env-xml"><a href="#2-2-5-hadoop-env-xml" class="headerlink" title="2.2.5 hadoop-env.xml"></a>2.2.5 hadoop-env.xml</h3><p>路径: &#x2F;opt&#x2F;modules&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;haddop-env.sh</p>
<p>功能: hadoop运行环境,用来定义hadoop运行环境相关的配置信息</p>
<img src="/2022/03/20/Ripple-The-News-Real-Time-Heat-Analysis-Platform/hadoop-env.png" width="400">

<h2 id="2-3-启动集群"><a href="#2-3-启动集群" class="headerlink" title="2.3 启动集群"></a>2.3 启动集群</h2><p><strong>未完待续 | To be continued</strong></p>
<h1 id="附录A：Problem"><a href="#附录A：Problem" class="headerlink" title="附录A：Problem"></a>附录A：Problem</h1><h1 id="附录B：参考网站"><a href="#附录B：参考网站" class="headerlink" title="附录B：参考网站"></a>附录B：参考网站</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1mK411T7WY?p=1">B站:新闻网大数据实时分析可视化系统</a></li>
<li><a href="https://hadoop.apache.org/docs/r2.6.5/">Hadoop官方文档</a></li>
<li><a href="https://archive.apache.org/dist">A.hadoop资源下载</a></li>
<li><a href="http://archive.cloudera.com/cdh5">B.hadoop资源下载</a></li>
</ol>
]]></content>
      <categories>
        <category>Private Projects</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Zookepper</tag>
        <tag>Flume</tag>
        <tag>Kafka</tag>
        <tag>Hive</tag>
        <tag>Hbase</tag>
        <tag>Spark</tag>
        <tag>Hue</tag>
      </tags>
  </entry>
</search>
